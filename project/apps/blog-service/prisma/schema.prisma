// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
enum PostStatus {
  DRAFT
  MODERATION
  PUBLISHED
  ARCHIVED
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostType {
  TEXT
  VIDEO
  PHOTO
  LINK
  QUOTE
}

model Post {
  id            String   @id @default(cuid())
  userId        String
  originalPostId String?
  originalUserId String?

  title         String
  description   String
  content       String

  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  status        PostStatus
  type          PostType

  photoSrc      String?
  author        String?
  announcement  String?
  url           String?
  videoUrl      String?

  comments      Comment[]
  favorite      Favorite[]
  tags          Tag[]
}

model Tag {
  id        String  @id @default(uuid())
  title     String
  posts     Post[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  @@index([title])
  @@map("tags")
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade , onUpdate: Cascade)

  @@index([postId])
  @@map("comments")
}

model Favorite {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  @@unique([postId, userId])
}
